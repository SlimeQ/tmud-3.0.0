var search_data = {"index":{"searchIndex":["asciicodes","acceptor","account","boolexpparser","cacheentry","cachemanager","cachestats","character","client","cmd","colorfilter","command","configuration","connection","connector","consoleclient","cursesclient","dbmstore","debugfilter","dumper","engine","event","eventmanager","exit","farts","attributesyntaxnode","callsyntaxnode","commandsyntaxnode","commentsyntaxnode","endsyntaxnode","ifsyntaxnode","interpreter","lexer","lib","literalsyntaxnode","localvarsyntaxnode","parser","programsyntaxnode","syntaxnode","filter","gameobject","gdbmstore","lineio","loader","log","module","obj","objcmd","object","packetio","protocolstack","publisher","reactor","room","root","sqlite","sqlite3","database","database","script","sdbmstore","session","sockio","sqlite3store","sqlitestore","store","string","telnetcodes","telnetfilter","terminalfilter","ternarytrie","tnode","timer","utility","vt100codes","world","xmlstore","yamlstore","[]()","[]()","[]=()","[]=()","_reduce_none()","_reduce_none()","add_admin()","add_builder()","add_contents()","add_event()","add_event()","add_trigger()","append_echo()","arrive()","call_lib_function()","character_menu()","characters()","check()","check()","check()","check()","check()","check()","check()","check()","clean!()","clone()","close()","close()","close()","close()","close()","close()","cmd_chat()","cmd_color()","cmd_drop()","cmd_dumpcache()","cmd_edit()","cmd_emote()","cmd_gc()","cmd_get()","cmd_go()","cmd_hello()","cmd_help()","cmd_inv()","cmd_kill()","cmd_look()","cmd_memstats()","cmd_object()","cmd_quit()","cmd_reload()","cmd_room()","cmd_say()","cmd_script()","cmd_set()","cmd_show()","cmd_shutdown()","cmd_stats()","cmd_status()","cmd_trigger()","cmd_who()","compile()","configuration()","conmsg()","conmsg()","contents()","dead?()","decode()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete()","delete_contents()","delete_object()","delete_trigger()","describe()","describe()","describe()","describe_exits()","desired?()","dirty!()","dirty?()","disconnect()","drop()","each()","each()","each()","each()","each()","each()","each()","each()","each()","echo()","echo()","edit_display()","edit_parser()","enabled?()","encode()","encrypt()","exec_list()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","execute()","fart_err()","filter_call()","filter_in()","filter_in()","filter_in()","filter_in()","filter_out()","filter_out()","filter_out()","filter_out()","filter_out()","find()","find_exact()","fire?()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get()","get_contents()","get_event()","get_object()","get_options()","get_options()","get_options()","get_options()","get_trigger()","get_triggers()","getid()","getkey()","graceful_shutdown()","handle_close()","handle_close()","handle_close()","handle_close()","handle_input()","handle_input()","handle_input()","handle_oob()","handle_oob()","handle_output()","handle_output()","handle_signal()","has_key?()","has_key?()","hash()","inc()","init()","init()","init()","init()","init()","init()","init()","init_subneg()","insert()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","inspect()","is_admin?()","is_builder?()","is_match?()","is_owner?()","is_passwd?()","is_prefix?()","is_readable?()","is_writable?()","ischaracter()","iscritter()","isroom()","keys()","leave()","level()","lineno()","load()","load()","logger()","login_menu()","loginit()","makenoswap()","makenoswap()","makenoswap()","makenoswap()","makenoswap()","makenoswap()","makenoswap()","makeswap()","makeswap()","makeswap()","makeswap()","makeswap()","makeswap()","makeswap()","mark()","mark()","mark()","mark()","mark()","mark()","mark()","mark_dead()","memstats()","mode?()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","next_token()","noswap!()","noswap?()","objects()","ocmd_echoat()","options()","parse()","parse()","parse()","parse_menu()","parse_messages()","poll()","process_events()","prompt()","proper_name()","property()","publish()","put()","put()","put()","put()","put()","put()","put()","put()","put()","put_object()","query()","query()","rand()","read()","read()","read()","read_flush()","read_urgent()","register()","rem_admin()","rem_builder()","reset()","run()","run()","run()","run()","run()","save()","save()","save()","save()","save()","save()","save()","save()","send_naws()","sendmsg()","sendmsg()","sendto()","set()","set()","set_initdone()","set_mode()","set_timer()","sex()","show()","shutdown()","start()","startup()","stats()","stats()","stats()","stats()","stats()","stats()","stats()","status_rept()","stop()","store()","subscribe()","subscriber_count()","swap!()","sync()","sync_chain()","timer()","to_hash()","toggle_color()","tokenpos()","unregister()","unset_timer()","unsubscribe()","unsubscribe_all()","update()","update()","update()","update()","update()","update()","vtsupport?()","word_wrap()","world()","write()","write()","write_flush()","write_urgent()","readme","tml"],"longSearchIndex":["asciicodes","acceptor","account","boolexpparser","cacheentry","cachemanager","cachestats","character","client","cmd","colorfilter","command","configuration","connection","connector","consoleclient","cursesclient","dbmstore","debugfilter","dumper","engine","event","eventmanager","exit","farts","farts::attributesyntaxnode","farts::callsyntaxnode","farts::commandsyntaxnode","farts::commentsyntaxnode","farts::endsyntaxnode","farts::ifsyntaxnode","farts::interpreter","farts::lexer","farts::lib","farts::literalsyntaxnode","farts::localvarsyntaxnode","farts::parser","farts::programsyntaxnode","farts::syntaxnode","filter","gameobject","gdbmstore","lineio","loader","log","module","obj","objcmd","object","packetio","protocolstack","publisher","reactor","room","root","sqlite","sqlite3","sqlite3::database","sqlite::database","script","sdbmstore","session","sockio","sqlite3store","sqlitestore","store","string","telnetcodes","telnetfilter","terminalfilter","ternarytrie","ternarytrie::tnode","timer","utility","vt100codes","world","xmlstore","yamlstore","sqlite3::database#[]()","sqlite::database#[]()","sqlite3::database#[]=()","sqlite::database#[]=()","boolexpparser#_reduce_none()","farts::parser#_reduce_none()","world#add_admin()","world#add_builder()","gameobject#add_contents()","eventmanager#add_event()","root#add_event()","gameobject#add_trigger()","account#append_echo()","room#arrive()","farts::interpreter#call_lib_function()","account#character_menu()","gameobject#characters()","dbmstore#check()","gdbmstore#check()","sdbmstore#check()","sqlite3store#check()","sqlitestore#check()","store#check()","xmlstore#check()","yamlstore#check()","cacheentry#clean!()","root#clone()","dbmstore#close()","gdbmstore#close()","sdbmstore#close()","sqlite3store#close()","sqlitestore#close()","store#close()","cmd#cmd_chat()","cmd#cmd_color()","cmd#cmd_drop()","cmd#cmd_dumpcache()","cmd#cmd_edit()","cmd#cmd_emote()","cmd#cmd_gc()","cmd#cmd_get()","cmd#cmd_go()","cmd#cmd_hello()","cmd#cmd_help()","cmd#cmd_inv()","cmd#cmd_kill()","cmd#cmd_look()","cmd#cmd_memstats()","cmd#cmd_object()","cmd#cmd_quit()","cmd#cmd_reload()","cmd#cmd_room()","cmd#cmd_say()","cmd#cmd_script()","cmd#cmd_set()","cmd#cmd_show()","cmd#cmd_shutdown()","cmd#cmd_stats()","cmd#cmd_status()","cmd#cmd_trigger()","cmd#cmd_who()","script#compile()","module#configuration()","consoleclient#conmsg()","cursesclient#conmsg()","eventmanager#contents()","cacheentry#dead?()","utility::decode()","cachemanager#delete()","dbmstore#delete()","gdbmstore#delete()","sqlite3::database#delete()","sqlite::database#delete()","sdbmstore#delete()","sqlite3store#delete()","sqlitestore#delete()","store#delete()","xmlstore#delete()","yamlstore#delete()","gameobject#delete_contents()","root#delete_object()","gameobject#delete_trigger()","character#describe()","gameobject#describe()","room#describe()","room#describe_exits()","telnetfilter#desired?()","cacheentry#dirty!()","cacheentry#dirty?()","account#disconnect()","gameobject#drop()","cachestats#each()","dbmstore#each()","gdbmstore#each()","sdbmstore#each()","sqlite3store#each()","sqlitestore#each()","store#each()","xmlstore#each()","yamlstore#each()","telnetfilter#echo()","terminalfilter#echo()","cmd#edit_display()","cmd#edit_parser()","telnetfilter#enabled?()","utility::encode()","string#encrypt()","farts::syntaxnode#exec_list()","farts::attributesyntaxnode#execute()","farts::callsyntaxnode#execute()","farts::commandsyntaxnode#execute()","farts::commentsyntaxnode#execute()","farts::endsyntaxnode#execute()","farts::ifsyntaxnode#execute()","farts::literalsyntaxnode#execute()","farts::localvarsyntaxnode#execute()","farts::programsyntaxnode#execute()","script#execute()","terminalfilter#execute()","farts::syntaxnode#fart_err()","protocolstack#filter_call()","debugfilter#filter_in()","filter#filter_in()","telnetfilter#filter_in()","terminalfilter#filter_in()","colorfilter#filter_out()","debugfilter#filter_out()","filter#filter_out()","telnetfilter#filter_out()","terminalfilter#filter_out()","ternarytrie#find()","ternarytrie#find_exact()","timer#fire?()","cachemanager#get()","dbmstore#get()","gameobject#get()","gdbmstore#get()","sdbmstore#get()","sqlite3store#get()","sqlitestore#get()","store#get()","xmlstore#get()","yamlstore#get()","gameobject#get_contents()","eventmanager#get_event()","root#get_object()","configuration#get_options()","dumper#get_options()","loader#get_options()","object#get_options()","gameobject#get_trigger()","gameobject#get_triggers()","store#getid()","object#getkey()","engine#graceful_shutdown()","acceptor#handle_close()","connection#handle_close()","connector#handle_close()","session#handle_close()","acceptor#handle_input()","connection#handle_input()","session#handle_input()","connection#handle_oob()","session#handle_oob()","connection#handle_output()","session#handle_output()","engine#handle_signal()","sqlite3::database#has_key?()","sqlite::database#has_key?()","cachemanager#hash()","cachestats#inc()","acceptor#init()","connection#init()","connector#init()","filter#init()","session#init()","telnetfilter#init()","terminalfilter#init()","telnetfilter#init_subneg()","ternarytrie#insert()","cachemanager#inspect()","dbmstore#inspect()","gdbmstore#inspect()","root#inspect()","sdbmstore#inspect()","sqlite3store#inspect()","sqlitestore#inspect()","store#inspect()","world#is_admin?()","world#is_builder?()","string#is_match?()","world#is_owner?()","string#is_passwd?()","string#is_prefix?()","session#is_readable?()","session#is_writable?()","farts::lib#ischaracter()","farts::lib#iscritter()","farts::lib#isroom()","cachemanager#keys()","exit#leave()","farts::lib#level()","farts::lexer#lineno()","command::load()","script#load()","module#logger()","account#login_menu()","log#loginit()","cachemanager#makenoswap()","dbmstore#makenoswap()","gdbmstore#makenoswap()","sdbmstore#makenoswap()","sqlite3store#makenoswap()","sqlitestore#makenoswap()","store#makenoswap()","cachemanager#makeswap()","dbmstore#makeswap()","gdbmstore#makeswap()","sdbmstore#makeswap()","sqlite3store#makeswap()","sqlitestore#makeswap()","store#makeswap()","cachemanager#mark()","dbmstore#mark()","gdbmstore#mark()","sdbmstore#mark()","sqlite3store#mark()","sqlitestore#mark()","store#mark()","cacheentry#mark_dead()","world#memstats()","terminalfilter#mode?()","acceptor::new()","account::new()","cacheentry::new()","cachemanager::new()","cachestats::new()","character::new()","client::new()","command::new()","configuration::new()","connection::new()","connector::new()","consoleclient::new()","cursesclient::new()","dbmstore::new()","debugfilter::new()","dumper::new()","engine::new()","event::new()","eventmanager::new()","exit::new()","farts::attributesyntaxnode::new()","farts::callsyntaxnode::new()","farts::commandsyntaxnode::new()","farts::commentsyntaxnode::new()","farts::endsyntaxnode::new()","farts::ifsyntaxnode::new()","farts::interpreter::new()","farts::lexer::new()","farts::literalsyntaxnode::new()","farts::localvarsyntaxnode::new()","farts::programsyntaxnode::new()","farts::syntaxnode::new()","filter::new()","gameobject::new()","gdbmstore::new()","lineio::new()","loader::new()","log::new()","packetio::new()","protocolstack::new()","reactor::new()","room::new()","root::new()","script::new()","sdbmstore::new()","session::new()","sockio::new()","sqlite3store::new()","sqlitestore::new()","store::new()","telnetfilter::new()","terminalfilter::new()","ternarytrie::new()","ternarytrie::tnode::new()","timer::new()","world::new()","xmlstore::new()","yamlstore::new()","farts::lexer#next_token()","cacheentry#noswap!()","cacheentry#noswap?()","gameobject#objects()","objcmd#ocmd_echoat()","command::options()","character#parse()","gameobject#parse()","root#parse()","account#parse_menu()","account#parse_messages()","reactor#poll()","eventmanager#process_events()","account#prompt()","string#proper_name()","module#property()","publisher#publish()","cachemanager#put()","dbmstore#put()","gdbmstore#put()","sdbmstore#put()","sqlite3store#put()","sqlitestore#put()","store#put()","xmlstore#put()","yamlstore#put()","root#put_object()","connection#query()","protocolstack#query()","farts::lib#rand()","lineio#read()","packetio#read()","sockio#read()","sockio#read_flush()","sockio#read_urgent()","reactor#register()","world#rem_admin()","world#rem_builder()","timer#reset()","consoleclient#run()","cursesclient#run()","dumper#run()","engine#run()","loader#run()","dbmstore#save()","gdbmstore#save()","sdbmstore#save()","sqlite3store#save()","sqlitestore#save()","store#save()","xmlstore#save()","yamlstore#save()","telnetfilter#send_naws()","account#sendmsg()","connection#sendmsg()","character#sendto()","connection#set()","protocolstack#set()","connection#set_initdone()","terminalfilter#set_mode()","world#set_timer()","farts::lib#sex()","character#show()","world#shutdown()","reactor#start()","world#startup()","cachemanager#stats()","dbmstore#stats()","gdbmstore#stats()","sdbmstore#stats()","sqlite3store#stats()","sqlitestore#stats()","store#stats()","account#status_rept()","reactor#stop()","dumper#store()","publisher#subscribe()","publisher#subscriber_count()","cacheentry#swap!()","cachemanager#sync()","cachemanager#sync_chain()","gameobject#timer()","ternarytrie#to_hash()","account#toggle_color()","farts::lexer#tokenpos()","reactor#unregister()","world#unset_timer()","publisher#unsubscribe()","publisher#unsubscribe_all()","account#update()","client#update()","connection#update()","consoleclient#update()","cursesclient#update()","engine#update()","account#vtsupport?()","cmd#word_wrap()","root#world()","packetio#write()","sockio#write()","sockio#write_flush()","sockio#write_urgent()","",""],"info":[["ASCIICodes","","ASCIICodes.html","","<p>This module contains the contants used for Telnet\n"],["Acceptor","","Acceptor.html","","<p>The acceptor class handles client connection requests for a reactor\n"],["Account","","Account.html","","<p>The Account class handles connection login and passes them to character.\n"],["BoolExpParser","","BoolExpParser.html","",""],["CacheEntry","","CacheEntry.html","","<p>This is a node in the cache and is a wrapper for the object and keeps flags\non the status of the entry. …\n"],["CacheManager","","CacheManager.html","","<p>This class manages the cache.  It is initialized by the Store and front\nends the database behind the …\n"],["CacheStats","","CacheStats.html","","<p>This class stores the cache statistics.\n"],["Character","","Character.html","","<p>The Character class is the mother of all characters. Who’s their daddy?\n"],["Client","","Client.html","",""],["Cmd","","Cmd.html","","<p>file &mdash; cmd_chat.rb\n<p>author &mdash; Jon A. Lambert\n<p>version &mdash; 2.3.0\n"],["ColorFilter","","ColorFilter.html","","<p>The ColorFilter class implements ANSI color (SGR) support.\n<p>A Filter can keep state and partial data\n"],["Command","","Command.html","","<p>The Command class encapsulates a TeensyMud command\n"],["Configuration","","Configuration.html","","<p>The Config class is a singleton that allows class level configuration\n"],["Connection","","Connection.html","","<p>The connection class maintains a socket connection with a reactor and\nhandles all events dispatched by …\n"],["Connector","","Connector.html","","<p>The Connector class handles outgoing connections\n"],["ConsoleClient","","ConsoleClient.html","",""],["CursesClient","","CursesClient.html","",""],["DbmStore","","DbmStore.html","","<p>The SdbmStore class manages access to all object storage.\n<p>db &mdash; is a handle to the database.\n<p>dbtop &mdash; stores …\n"],["DebugFilter","","DebugFilter.html","","<p>The DebugFilter class simply logs all that passes through it\n"],["Dumper","","Dumper.html","","<p>This utility program dumps a database to yaml\n"],["Engine","","Engine.html","","<p>The Engine class sets up the server, polls it regularly and observes\nacceptor for incoming connections. …\n"],["Event","","Event.html","","<p>The Event class is a temporally immediate message that is to be propagated\nto another object.\n"],["EventManager","","EventManager.html","",""],["Exit","","Exit.html","","<p>The Exit class is the mother of all exits.\n"],["Farts","","Farts.html","","<p>file &mdash; farts_lib.rb\n<p>author &mdash; Jon A. Lambert\n<p>version &mdash; 2.4.0\n"],["Farts::AttributeSyntaxNode","","Farts/AttributeSyntaxNode.html","",""],["Farts::CallSyntaxNode","","Farts/CallSyntaxNode.html","",""],["Farts::CommandSyntaxNode","","Farts/CommandSyntaxNode.html","",""],["Farts::CommentSyntaxNode","","Farts/CommentSyntaxNode.html","",""],["Farts::EndSyntaxNode","","Farts/EndSyntaxNode.html","",""],["Farts::IfSyntaxNode","","Farts/IfSyntaxNode.html","",""],["Farts::Interpreter","","Farts/Interpreter.html","","<p>The Interpreter class is an instance of a machine to execute a program\n"],["Farts::Lexer","","Farts/Lexer.html","","<p>The Lexer class converts the text of a program to tokens\n<p>token &mdash; is the current token being assembled\n\n"],["Farts::Lib","","Farts/Lib.html","","<p>The Lib class implements all the functions available to Farts programs.\n"],["Farts::LiteralSyntaxNode","","Farts/LiteralSyntaxNode.html","",""],["Farts::LocalVarSyntaxNode","","Farts/LocalVarSyntaxNode.html","",""],["Farts::Parser","","Farts/Parser.html","",""],["Farts::ProgramSyntaxNode","","Farts/ProgramSyntaxNode.html","",""],["Farts::SyntaxNode","","Farts/SyntaxNode.html","",""],["Filter","","Filter.html","","<p>The Filter class is an abstract class defining the minimal methods needed\nto filter data.\n<p>A Filter can …\n"],["GameObject","","GameObject.html","","<p>The GameObject class is no longer the mother of all objects.\n"],["GdbmStore","","GdbmStore.html","","<p>The GdbmStore class manages access to all object storage.\n<p>db &mdash; is a handle to the database.\n<p>dbtop &mdash; stores …\n"],["LineIO","","LineIO.html","","<p>The LineIO class implements a line-orient interface for TCP sockets. It’s a\nspecialization of sockio. …\n"],["Loader","","Loader.html","","<p>This utility program loads a yaml file to a database\n"],["Log","","Log.html","","<p>The Log class is a singleton that handles logging at the class level\n"],["Module","","Module.html","",""],["Obj","","Obj.html","",""],["ObjCmd","","ObjCmd.html","","<p>file &mdash; ocmd_echoat.rb\n<p>author &mdash; Jon A. Lambert\n<p>version &mdash; 2.4.0\n"],["Object","","Object.html","",""],["PacketIO","","PacketIO.html","","<p>The PacketIO class implements a mechanism to send and recv packets\ndelimited by a length prefix which …\n"],["ProtocolStack","","ProtocolStack.html","","<p>The ProtocolStack class implements a stack of input and output filters. It\nalso maintains some interesting …\n"],["Publisher","","Publisher.html","","<p>Publisher is a variation on Ruby’s Observable.  We do not keep track of any\nchanged state; instead we …\n"],["Reactor","","Reactor.html","","<p>The Reactor class defines a representation of a multiplexer based on a\nnon-blocking select() server. …\n"],["Room","","Room.html","","<p>The Room class is the mother of all rooms.\n"],["Root","","Root.html","","<p>The Root class is the mother of all objects.\n"],["SQLite","","SQLite.html","","<p>Override class with our hash methods\n"],["SQLite3","","SQLite3.html","","<p>Override class with our hash methods\n"],["SQLite3::Database","","SQLite3/Database.html","",""],["SQLite::Database","","SQLite/Database.html","",""],["Script","","Script.html","","<p>The Script class defines te characteristic of an executable program.\n"],["SdbmStore","","SdbmStore.html","","<p>The SdbmStore class manages access to all object storage.\n<p>db &mdash; is a handle to the database.\n<p>dbtop &mdash; stores …\n"],["Session","","Session.html","","<p>The session class is a base class contains the minimum amount of attributes\nto reasonably maintain a …\n"],["SockIO","","SockIO.html","","<p>The SockIO class implements the low level interface for TCP sockets.\n"],["Sqlite3Store","","Sqlite3Store.html","","<p>The SqliteStore class manages access to all object storage.\n<p>db &mdash; is a handle to the database.\n<p>dbtop &mdash; stores …\n"],["SqliteStore","","SqliteStore.html","","<p>The SqliteStore class manages access to all object storage.\n<p>db &mdash; is a handle to the database.\n<p>dbtop &mdash; stores …\n"],["Store","","Store.html","","<p>The Store class is an abstract class defining the methods needed to access\na data store\n"],["String","","String.html","",""],["TelnetCodes","","TelnetCodes.html","","<p>This module contains the contants used for Telnet\n"],["TelnetFilter","","TelnetFilter.html","","<p>The TelnetFilter class implements the Telnet protocol.\n<p>This implements most of basic Telnet as per RFCs …\n"],["TerminalFilter","","TerminalFilter.html","","<p>The TerminalFilter class implements a subset of ANSI/VT100 protocol.\n"],["TernaryTrie","","TernaryTrie.html","","<p>class TernaryTrie implements a ternary search trie.  The keys are are\nassumed to be strings, but the …\n"],["TernaryTrie::TNode","","TernaryTrie/TNode.html","","<p>The trie node - not for public consumption\n"],["Timer","","Timer.html","","<p>The Timer class defines the necessary data to keep track of timers for\nobjects\n"],["Utility","","Utility.html","",""],["VT100Codes","","VT100Codes.html","","<p>This module contains the contants used for Telnet\n"],["World","","World.html","","<p>The World class is the mother of all worlds.\n<p>It contains world state information, the world timer, utility …\n"],["XmlStore","","XmlStore.html","","<p>The XmlStore class manages access to all object storage.\n<p>db &mdash; is a handle to the database implementation …\n"],["YamlStore","","YamlStore.html","","<p>The YamlStore class manages access to all object storage.\n<p>db &mdash; is a handle to the database implementation …\n"],["[]","SQLite3::Database","SQLite3/Database.html#method-i-5B-5D","(idx)",""],["[]","SQLite::Database","SQLite/Database.html#method-i-5B-5D","(idx)",""],["[]=","SQLite3::Database","SQLite3/Database.html#method-i-5B-5D-3D","(idx, data)",""],["[]=","SQLite::Database","SQLite/Database.html#method-i-5B-5D-3D","(idx, data)",""],["_reduce_none","BoolExpParser","BoolExpParser.html#method-i-_reduce_none","(val, _values, result)",""],["_reduce_none","Farts::Parser","Farts/Parser.html#method-i-_reduce_none","(val, _values, result)",""],["add_admin","World","World.html#method-i-add_admin","(oid)","<p>Make the character an admin\n<p>oid &mdash; character object id\n<p>return &mdash; undefined\n"],["add_builder","World","World.html#method-i-add_builder","(oid)","<p>Make the character a builder\n<p>oid &mdash; character object id\n<p>return &mdash; undefined\n"],["add_contents","GameObject","GameObject.html#method-i-add_contents","(oid)","<p>Add an object to the contents of this object\n<p>oid &mdash; The object id to add\n\n"],["add_event","EventManager","EventManager.html#method-i-add_event","(from,to,kind,msg=nil)","<p>Add an Event to the TITS queue.\n<p>e &mdash; The event to be added.\n<p>return &mdash; Undefined.\n"],["add_event","Root","Root.html#method-i-add_event","(from,to,kind,msg=nil)",""],["add_trigger","GameObject","GameObject.html#method-i-add_trigger","(event, sid)","<p>Add a trigger script to this object\n<p>s &mdash; The script to add\n\n"],["append_echo","Account","Account.html#method-i-append_echo","(msg)","<p>If echo hasn’t been negotiated, we want to leave the cursor after the\nmessage prompt, so we prepend linefeeds …\n"],["arrive","Room","Room.html#method-i-arrive","(e)","<p>Event :arrive\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["call_lib_function","Farts::Interpreter","Farts/Interpreter.html#method-i-call_lib_function","( fname, args )",""],["character_menu","Account","Account.html#method-i-character_menu","()",""],["characters","GameObject","GameObject.html#method-i-characters","(exempt=nil)","<p>Finds all the characters contained in this object except the passed\ncharacter.\n<p>exempt &mdash; The character id …\n"],["check","DbmStore","DbmStore.html#method-i-check","(oid)","<p>Check if an object is in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; true or false …\n"],["check","GdbmStore","GdbmStore.html#method-i-check","(oid)","<p>Check if an object is in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; true or false …\n"],["check","SdbmStore","SdbmStore.html#method-i-check","(oid)","<p>Check if an object is in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; true or false …\n"],["check","Sqlite3Store","Sqlite3Store.html#method-i-check","(oid)","<p>Check if an object is in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; true or false …\n"],["check","SqliteStore","SqliteStore.html#method-i-check","(oid)","<p>Check if an object is in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; true or false …\n"],["check","Store","Store.html#method-i-check","(oid)","<p>Check if an object is in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; true or false …\n"],["check","XmlStore","XmlStore.html#method-i-check","(oid)","<p>Check if an object is in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; true or false …\n"],["check","YamlStore","YamlStore.html#method-i-check","(oid)","<p>Check if an object is in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; true or false …\n"],["clean!","CacheEntry","CacheEntry.html#method-i-clean-21","()",""],["clone","Root","Root.html#method-i-clone","()","<p>Clone an object This does a deepcopy then assign a new database id\n<p>return &mdash; A handle to the new Object\n\n"],["close","DbmStore","DbmStore.html#method-i-close","()","<p>Close the database\n<p>return &mdash; Undefined.\n\n"],["close","GdbmStore","GdbmStore.html#method-i-close","()","<p>Close the database\n<p>return &mdash; Undefined.\n\n"],["close","SdbmStore","SdbmStore.html#method-i-close","()","<p>Close the database\n<p>return &mdash; Undefined.\n\n"],["close","Sqlite3Store","Sqlite3Store.html#method-i-close","()","<p>Close the database\n<p>return &mdash; Undefined.\n\n"],["close","SqliteStore","SqliteStore.html#method-i-close","()","<p>Close the database\n<p>return &mdash; Undefined.\n\n"],["close","Store","Store.html#method-i-close","()","<p>Close the store\n<p>return &mdash; Undefined.\n\n"],["cmd_chat","Cmd","Cmd.html#method-i-cmd_chat","(args)","<p>sends &lt;message&gt; to all characters in the game\n"],["cmd_color","Cmd","Cmd.html#method-i-cmd_color","(args)","<p>toggles colors on or off\n"],["cmd_drop","Cmd","Cmd.html#method-i-cmd_drop","(args)","<p>drops all objects in your inventory into the room\n"],["cmd_dumpcache","Cmd","Cmd.html#method-i-cmd_dumpcache","(args)","<p>Look command displays the contents of a room\n"],["cmd_edit","Cmd","Cmd.html#method-i-cmd_edit","(args)","<p>@edits a string field on an object Syntax:\n\n<pre>@edit #&lt;id&gt; &lt;field&gt;\n@edit sysmsg &lt;field&gt;</pre>\n<p>(ex. @edit #1 desc …\n"],["cmd_emote","Cmd","Cmd.html#method-i-cmd_emote","(args)","<p>sends &lt;message&gt; to all characters in the room\n"],["cmd_gc","Cmd","Cmd.html#method-i-cmd_gc","(args)","<p>This command runs garbage collection\n"],["cmd_get","Cmd","Cmd.html#method-i-cmd_get","(args)","<p>gets all objects in the room into your inventory\n"],["cmd_go","Cmd","Cmd.html#method-i-cmd_go","(args)","<p>sends &lt;message&gt; to all characters in the room\n"],["cmd_hello","Cmd","Cmd.html#method-i-cmd_hello","(args)","<p>The hello social command\n"],["cmd_help","Cmd","Cmd.html#method-i-cmd_help","(args)","<p>The help command\n"],["cmd_inv","Cmd","Cmd.html#method-i-cmd_inv","(args)","<p>The inventory command\n"],["cmd_kill","Cmd","Cmd.html#method-i-cmd_kill","(args)","<p>This kills a character anywhere - it’s link death (30% chance)\n"],["cmd_look","Cmd","Cmd.html#method-i-cmd_look","(args)","<p>Look command displays the contents of a room\n"],["cmd_memstats","Cmd","Cmd.html#method-i-cmd_memstats","(args)","<p>The memory stats command\n"],["cmd_object","Cmd","Cmd.html#method-i-cmd_object","(args)","<p>sets the description for an object (ex. @set #1 A beautiful rose.)\n"],["cmd_quit","Cmd","Cmd.html#method-i-cmd_quit","(args)","<p>The quit command\n"],["cmd_reload","Cmd","Cmd.html#method-i-cmd_reload","(args)","<p>This reloads the commands\n"],["cmd_room","Cmd","Cmd.html#method-i-cmd_room","(args)","<p>creates a new room and autolinks the exits using the exit names provided.\n(ex. @room My Room north south) …\n"],["cmd_say","Cmd","Cmd.html#method-i-cmd_say","(args)","<p>sends &lt;message&gt; to all characters in the room\n"],["cmd_script","Cmd","Cmd.html#method-i-cmd_script","(args)","<p>adds, deletes, lists, or  a script Syntax:\n\n<pre>@script add &lt;lang&gt; &lt;progname&gt;|&lt;code&gt;\n@script del #&lt;scriptid&gt; ...</pre>\n"],["cmd_set","Cmd","Cmd.html#method-i-cmd_set","(args)","<p>sets the description or timer for an object Syntax:\n\n<pre>@set desc #&lt;id&gt; &lt;description&gt;\n@set key #&lt;id&gt; &lt;description&gt; ...</pre>\n"],["cmd_show","Cmd","Cmd.html#method-i-cmd_show","(args)","<p>displays object Syntax:\n\n<pre>@show #&lt;oid&gt;|me</pre>\n<p>(ex. @show me)\n"],["cmd_shutdown","Cmd","Cmd.html#method-i-cmd_shutdown","(args)","<p>The shutdown command\n"],["cmd_stats","Cmd","Cmd.html#method-i-cmd_stats","(args)","<p>The database stats command\n"],["cmd_status","Cmd","Cmd.html#method-i-cmd_status","(args)","<p>displays session information\n"],["cmd_trigger","Cmd","Cmd.html#method-i-cmd_trigger","(args)","<p>adds, deletes, or shows triggers on an object Syntax:\n\n<pre>@trigger add #&lt;id&gt; #&lt;scriptid&gt; &lt;eventtype&gt;\n@trigger ...</pre>\n"],["cmd_who","Cmd","Cmd.html#method-i-cmd_who","(args)","<p>shows a list of all connected characters\n"],["compile","Script","Script.html#method-i-compile","()","<p>Compile a program\n<p>return &mdash; success or failure\n\n"],["configuration","Module","Module.html#method-i-configuration","()","<p>configure adds the options method to a class which allows it to access the\nglobal configuration hash. …\n"],["conmsg","ConsoleClient","ConsoleClient.html#method-i-conmsg","(msg)",""],["conmsg","CursesClient","CursesClient.html#method-i-conmsg","(msg)",""],["contents","EventManager","EventManager.html#method-i-contents","()",""],["dead?","CacheEntry","CacheEntry.html#method-i-dead-3F","()","<p>A dead cache entry is an object that has been deleted\n"],["decode","Utility","Utility.html#method-c-decode","(str)",""],["delete","CacheManager","CacheManager.html#method-i-delete","(oid)","<p>delete an object\n"],["delete","DbmStore","DbmStore.html#method-i-delete","(oid)","<p>Deletes an object from the database.\n<p>oid &mdash; is the id to to be deleted.\n<p>return &mdash; Undefined.\n"],["delete","GdbmStore","GdbmStore.html#method-i-delete","(oid)","<p>Deletes an object from the database.\n<p>oid &mdash; is the id to to be deleted.\n<p>return &mdash; Undefined.\n"],["delete","SQLite3::Database","SQLite3/Database.html#method-i-delete","(idx)",""],["delete","SQLite::Database","SQLite/Database.html#method-i-delete","(idx)",""],["delete","SdbmStore","SdbmStore.html#method-i-delete","(oid)","<p>Deletes an object from the database.\n<p>oid &mdash; is the id to to be deleted.\n<p>return &mdash; Undefined.\n"],["delete","Sqlite3Store","Sqlite3Store.html#method-i-delete","(oid)","<p>Deletes an object from the database.\n<p>oid &mdash; is the id to to be deleted.\n<p>return &mdash; Undefined.\n"],["delete","SqliteStore","SqliteStore.html#method-i-delete","(oid)","<p>Deletes an object from the database.\n<p>oid &mdash; is the id to to be deleted.\n<p>return &mdash; Undefined.\n"],["delete","Store","Store.html#method-i-delete","(oid)","<p>Deletes an object from the database.\n<p>oid &mdash; is the id to to be deleted.\n<p>return &mdash; Undefined.\n"],["delete","XmlStore","XmlStore.html#method-i-delete","(oid)","<p>Deletes an object from the database.\n<p>oid &mdash; is the id to to be deleted.\n<p>return &mdash; Undefined.\n"],["delete","YamlStore","YamlStore.html#method-i-delete","(oid)","<p>Deletes an object from the database.\n<p>oid &mdash; is the id to to be deleted.\n<p>return &mdash; Undefined.\n"],["delete_contents","GameObject","GameObject.html#method-i-delete_contents","(oid)","<p>Deletes an object from the contents of this object\n<p>oid &mdash; The object id to delete\n\n"],["delete_object","Root","Root.html#method-i-delete_object","(oid)",""],["delete_trigger","GameObject","GameObject.html#method-i-delete_trigger","(event)","<p>Deletes a trigger script from this object\n<p>event &mdash; The trigger event type to delete\n\n"],["describe","Character","Character.html#method-i-describe","(e)","<p>Event :describe\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["describe","GameObject","GameObject.html#method-i-describe","(e)","<p>Event :describe\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["describe","Room","Room.html#method-i-describe","(e)","<p>Event :describe\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["describe_exits","Room","Room.html#method-i-describe_exits","(e)","<p>Event :describe_exits\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["desired?","TelnetFilter","TelnetFilter.html#method-i-desired-3F","(opt)","<p>Test to see which state we prefer this option to be in\n<p>opt &mdash; The Telnet option code\n\n"],["dirty!","CacheEntry","CacheEntry.html#method-i-dirty-21","()",""],["dirty?","CacheEntry","CacheEntry.html#method-i-dirty-3F","()","<p>dirty cache entries are those that probably differ from the database\n"],["disconnect","Account","Account.html#method-i-disconnect","(msg=nil)","<p>Disconnects this account\n"],["drop","GameObject","GameObject.html#method-i-drop","(e)","<p>Event :drop\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["each","CacheStats","CacheStats.html#method-i-each","(&blk)",""],["each","DbmStore","DbmStore.html#method-i-each","()","<p>Iterate through all objects This needs to have all the possible keys first.\nSo we need to fetch them …\n"],["each","GdbmStore","GdbmStore.html#method-i-each","()","<p>Iterate through all objects This needs to have all the possible keys first.\nSo we need to fetch them …\n"],["each","SdbmStore","SdbmStore.html#method-i-each","()","<p>Iterate through all objects This needs to have all the possible keys first.\nSo we need to fetch them …\n"],["each","Sqlite3Store","Sqlite3Store.html#method-i-each","()","<p>Iterate through all objects This needs to have all the possible keys first.\nSo we need to fetch them …\n"],["each","SqliteStore","SqliteStore.html#method-i-each","()","<p>Iterate through all objects This needs to have all the possible keys first.\nSo we need to fetch them …\n"],["each","Store","Store.html#method-i-each","()","<p>Iterate through all objects\n<p>yield &mdash; Each object in database to block of caller.\n\n"],["each","XmlStore","XmlStore.html#method-i-each","(&blk)","<p>Iterate through all objects\n<p>yield &mdash; Each object in database to block of caller.\n\n"],["each","YamlStore","YamlStore.html#method-i-each","(&blk)","<p>Iterate through all objects\n<p>yield &mdash; Each object in database to block of caller.\n\n"],["echo","TelnetFilter","TelnetFilter.html#method-i-echo","(ch)","<p>Handle server-side echo\n<p>ch &mdash; character string to echo\n\n"],["echo","TerminalFilter","TerminalFilter.html#method-i-echo","(ch)","<p>Handle server-side echo\n"],["edit_display","Cmd","Cmd.html#method-i-edit_display","(str)",""],["edit_parser","Cmd","Cmd.html#method-i-edit_parser","(args)",""],["enabled?","TelnetFilter","TelnetFilter.html#method-i-enabled-3F","(opt, who)","<p>Test to see if option is enabled\n<p>opt &mdash; The Telnet option code\n<p>who &mdash; The side to check :us or :him\n"],["encode","Utility","Utility.html#method-c-encode","(obj)",""],["encrypt","String","String.html#method-i-encrypt","()","<p>Encrypts a password\n<p>return &mdash; The encrypted string\n\n"],["exec_list","Farts::SyntaxNode","Farts/SyntaxNode.html#method-i-exec_list","(intp, nodes)",""],["execute","Farts::AttributeSyntaxNode","Farts/AttributeSyntaxNode.html#method-i-execute","(intp)",""],["execute","Farts::CallSyntaxNode","Farts/CallSyntaxNode.html#method-i-execute","(intp)",""],["execute","Farts::CommandSyntaxNode","Farts/CommandSyntaxNode.html#method-i-execute","(intp)",""],["execute","Farts::CommentSyntaxNode","Farts/CommentSyntaxNode.html#method-i-execute","(intp)",""],["execute","Farts::EndSyntaxNode","Farts/EndSyntaxNode.html#method-i-execute","(intp)",""],["execute","Farts::IfSyntaxNode","Farts/IfSyntaxNode.html#method-i-execute","(intp)",""],["execute","Farts::LiteralSyntaxNode","Farts/LiteralSyntaxNode.html#method-i-execute","( intp )",""],["execute","Farts::LocalVarSyntaxNode","Farts/LocalVarSyntaxNode.html#method-i-execute","( intp )",""],["execute","Farts::ProgramSyntaxNode","Farts/ProgramSyntaxNode.html#method-i-execute","(vars)",""],["execute","Script","Script.html#method-i-execute","(ev)","<p>Execute a program\n<p>return &mdash; success or failure\n\n"],["execute","TerminalFilter","TerminalFilter.html#method-i-execute","(b)",""],["fart_err","Farts::SyntaxNode","Farts/SyntaxNode.html#method-i-fart_err","(msg)",""],["filter_call","ProtocolStack","ProtocolStack.html#method-i-filter_call","(method, args)","<p>A method is called on each filter in the stack in order.\n<p>method &mdash; <p>args &mdash; \n"],["filter_in","DebugFilter","DebugFilter.html#method-i-filter_in","(str)","<p>The filter_in method filters input data\n<p>str &mdash; The string to be processed\n<p>return &mdash; The filtered data\n"],["filter_in","Filter","Filter.html#method-i-filter_in","(str)","<p>The filter_in method filters input data\n<p>str &mdash; The string to be processed\n<p>return &mdash; The filtered data\n"],["filter_in","TelnetFilter","TelnetFilter.html#method-i-filter_in","(str)","<p>The filter_in method filters input data\n<p>str &mdash; The string to be processed\n<p>return &mdash; The filtered data\n"],["filter_in","TerminalFilter","TerminalFilter.html#method-i-filter_in","(str)","<p>The filter_in method filters out VTxx terminal data and inserts format\nstrings into the input stream. …\n"],["filter_out","ColorFilter","ColorFilter.html#method-i-filter_out","(str)","<p>The filter_out method filters output data\n<p>str &mdash; The string to be processed\n<p>return &mdash; The filtered data\n"],["filter_out","DebugFilter","DebugFilter.html#method-i-filter_out","(str)","<p>The filter_out method filters output data\n<p>str &mdash; The string to be processed\n<p>return &mdash; The filtered data\n"],["filter_out","Filter","Filter.html#method-i-filter_out","(str)","<p>The filter_out method filters output data\n<p>str &mdash; The string to be processed\n<p>return &mdash; The filtered data\n"],["filter_out","TelnetFilter","TelnetFilter.html#method-i-filter_out","(str)","<p>The filter_out method filters output data\n<p>str &mdash; The string to be processed\n<p>return &mdash; The filtered data\n"],["filter_out","TerminalFilter","TerminalFilter.html#method-i-filter_out","(str)","<p>The filter_out method filters output data\n<p>str &mdash; The string to be processed\n<p>return &mdash; The filtered data\n"],["find","TernaryTrie","TernaryTrie.html#method-i-find","(key)","<p>Returns array of values that are the shortest possible match of the key.\n<p>key &mdash; A string\n<p>return &mdash; An array of …\n"],["find_exact","TernaryTrie","TernaryTrie.html#method-i-find_exact","(key)","<p>Returns an exact match only of the key or nil if not found\n<p>key &mdash; A string\n<p>return &mdash; A values or nil if nothing …\n"],["fire?","Timer","Timer.html#method-i-fire-3F","()",""],["get","CacheManager","CacheManager.html#method-i-get","(oid)","<p>gets an object\n<p>oid &mdash; <p>integer object id to retrieve\n\n<p>return &mdash; <p>a reference to the object or nil if none exists …\n"],["get","DbmStore","DbmStore.html#method-i-get","(oid)","<p>Finds an object in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; Handle to the object …\n"],["get","GameObject","GameObject.html#method-i-get","(e)","<p>Event :get\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["get","GdbmStore","GdbmStore.html#method-i-get","(oid)","<p>Finds an object in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; Handle to the object …\n"],["get","SdbmStore","SdbmStore.html#method-i-get","(oid)","<p>Finds an object in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; Handle to the object …\n"],["get","Sqlite3Store","Sqlite3Store.html#method-i-get","(oid)","<p>Finds an object in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; Handle to the object …\n"],["get","SqliteStore","SqliteStore.html#method-i-get","(oid)","<p>Finds an object in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; Handle to the object …\n"],["get","Store","Store.html#method-i-get","(oid)","<p>Finds an object in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; Handle to the object …\n"],["get","XmlStore","XmlStore.html#method-i-get","(oid)","<p>Finds an object in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; Handle to the object …\n"],["get","YamlStore","YamlStore.html#method-i-get","(oid)","<p>Finds an object in the database by its id.\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; Handle to the object …\n"],["get_contents","GameObject","GameObject.html#method-i-get_contents","()","<p>Returns the contents of the object\n<p>return &mdash; An array of object ids\n\n"],["get_event","EventManager","EventManager.html#method-i-get_event","()","<p>Get an Event from the TITS queue.\n<p>return &mdash; The Event or nil\n\n"],["get_object","Root","Root.html#method-i-get_object","(oid)",""],["get_options","Configuration","Configuration.html#method-i-get_options","()","<p>only process configuration file option from command line\n"],["get_options","Dumper","Dumper.html#method-i-get_options","()","<p>Processes command line arguments\n"],["get_options","Loader","Loader.html#method-i-get_options","()","<p>Processes command line arguments\n"],["get_options","Object","Object.html#method-i-get_options","()","<p>Processes command line arguments\n"],["get_trigger","GameObject","GameObject.html#method-i-get_trigger","(event)","<p>Returns a specific trigger script from the object\n<p>event &mdash; The trigger event type to retrieve\n<p>return &mdash; A trigger …\n"],["get_triggers","GameObject","GameObject.html#method-i-get_triggers","()","<p>Returns the trigger scripts on the object\n<p>return &mdash; An array of trigger scripts\n\n"],["getid","Store","Store.html#method-i-getid","()","<p>Fetch the next available id.\n<p>return &mdash; An id.\n\n"],["getkey","Object","Object.html#method-i-getkey","()",""],["graceful_shutdown","Engine","Engine.html#method-i-graceful_shutdown","()",""],["handle_close","Acceptor","Acceptor.html#method-i-handle_close","()","<p>handle_close is called when a close event occurs for this acceptor.\n"],["handle_close","Connection","Connection.html#method-i-handle_close","()","<p>handle_close is called to when an close event occurs for this session.\n"],["handle_close","Connector","Connector.html#method-i-handle_close","()","<p>handle_close is called when a close event occurs for this Connector.\n"],["handle_close","Session","Session.html#method-i-handle_close","()","<p>handle_close is called when a close event occurs for this session.\n"],["handle_input","Acceptor","Acceptor.html#method-i-handle_input","()","<p>handle_input is called when an pending connection occurs on the listening\nsocket’s port.  This function …\n"],["handle_input","Connection","Connection.html#method-i-handle_input","()","<p>handle_input is called to order a connection to process any input waiting\non its socket.  Input is parsed …\n"],["handle_input","Session","Session.html#method-i-handle_input","()","<p>handle_input is called when an input event occurs for this session.\n"],["handle_oob","Connection","Connection.html#method-i-handle_oob","()","<p>handle_oob is called when an out of band data event occurs for this\nsession.\n"],["handle_oob","Session","Session.html#method-i-handle_oob","()","<p>handle_oob is called when an out of band data event occurs for this\nsession.\n"],["handle_output","Connection","Connection.html#method-i-handle_output","()","<p>handle_output is called to order a connection to process any output waiting\non its socket.\n"],["handle_output","Session","Session.html#method-i-handle_output","()","<p>handle_output is called when an output event occurs for this session.\n"],["handle_signal","Engine","Engine.html#method-i-handle_signal","(sig)","<p>Setup traps - invoke one of these signals to shut down the mud\n"],["has_key?","SQLite3::Database","SQLite3/Database.html#method-i-has_key-3F","(idx)",""],["has_key?","SQLite::Database","SQLite/Database.html#method-i-has_key-3F","(idx)",""],["hash","CacheManager","CacheManager.html#method-i-hash","(oid)","<p>Our simple hash algoritm.  Our database keys are sequentially assigned\nintegers, so… I don’t know what …\n"],["inc","CacheStats","CacheStats.html#method-i-inc","(k)",""],["init","Acceptor","Acceptor.html#method-i-init","()","<p>init is called before using the acceptor\n<p>returns &mdash; true is acceptor is properly initialized\n\n"],["init","Connection","Connection.html#method-i-init","()","<p>init is called before using the connection.\n<p>returns &mdash; true is connection is properly initialized\n\n"],["init","Connector","Connector.html#method-i-init","()","<p>init is called before using the Connector\n<p>returns &mdash; true is acceptor is properly initialized\n\n"],["init","Filter","Filter.html#method-i-init","(args=nil)","<p>Run any post-contruction initialization\n<p>args &mdash; Optional initial options\n\n"],["init","Session","Session.html#method-i-init","()","<p>init is called before using the session.\n<p>returns &mdash; true is session object properly initialized\n\n"],["init","TelnetFilter","TelnetFilter.html#method-i-init","(args)","<p>Negotiate starting wanted options\n<p>args &mdash; Optional initial options\n\n"],["init","TerminalFilter","TerminalFilter.html#method-i-init","(args=nil)","<p>Run any post-contruction initialization\n<p>args &mdash; Optional initial options\n\n"],["init_subneg","TelnetFilter","TelnetFilter.html#method-i-init_subneg","()","<p>Negotiate starting wanted options that imply subnegotation So far only\nterminal type\n"],["insert","TernaryTrie","TernaryTrie.html#method-i-insert","(key, val)","<p>Inserts a key/val pair - no duplicate keys (will replace key if found).\n<p>key &mdash; A string\n<p>value &mdash; A value which …\n"],["inspect","CacheManager","CacheManager.html#method-i-inspect","()","<p>report on the cache map  see cmd_dumpcache\n"],["inspect","DbmStore","DbmStore.html#method-i-inspect","()","<p>inspect the store cache (only for caches)\n<p>return &mdash; string\n\n"],["inspect","GdbmStore","GdbmStore.html#method-i-inspect","()","<p>inspect the store cache (only for caches)\n<p>return &mdash; string\n\n"],["inspect","Root","Root.html#method-i-inspect","()","<p>formatted dump of object properties\n<p>return &mdash; a string\n\n"],["inspect","SdbmStore","SdbmStore.html#method-i-inspect","()","<p>inspect the store cache (only for caches)\n<p>return &mdash; string\n\n"],["inspect","Sqlite3Store","Sqlite3Store.html#method-i-inspect","()","<p>inspect the store cache (only for caches)\n<p>return &mdash; string\n\n"],["inspect","SqliteStore","SqliteStore.html#method-i-inspect","()","<p>inspect the store cache (only for caches)\n<p>return &mdash; string\n\n"],["inspect","Store","Store.html#method-i-inspect","()","<p>inspect the store cache (only for caches)\n<p>return &mdash; Undefined.\n\n"],["is_admin?","World","World.html#method-i-is_admin-3F","(oid)","<p>Is character an admin?\n<p>oid &mdash; character object id\n<p>return &mdash; true or false\n"],["is_builder?","World","World.html#method-i-is_builder-3F","(oid)","<p>Is character a builder?\n<p>oid &mdash; character object id\n<p>return &mdash; true or false\n"],["is_match?","String","String.html#method-i-is_match-3F","(str)","<p>Takes a string containing a list of keywords, like ‘hello world’, and\nchecks if ‘str’ is a prefix of …\n"],["is_owner?","World","World.html#method-i-is_owner-3F","(pid, oid)","<p>Does character own the object?\n<p>pid &mdash; character object id\n<p>oid &mdash; object id\n"],["is_passwd?","String","String.html#method-i-is_passwd-3F","(pwd)","<p>Compares the password with the string\n<p>pwd &mdash; The encrypted password\n<p>return &mdash; true if they are equal, false if …\n"],["is_prefix?","String","String.html#method-i-is_prefix-3F","(str)","<p>Checks if ‘str’ is a prefix of this string\n"],["is_readable?","Session","Session.html#method-i-is_readable-3F","()","<p>is_readable? tests if the socket is a candidate for select read\n{<code>return</code>] true if so, false if not\n"],["is_writable?","Session","Session.html#method-i-is_writable-3F","()","<p>is_writable? tests if the socket is a candidate for select write\n{<code>return</code>] true if so, false if not\n"],["ischaracter","Farts::Lib","Farts/Lib.html#method-i-ischaracter","(actor)","<p>Is actor a Character\n"],["iscritter","Farts::Lib","Farts/Lib.html#method-i-iscritter","(actor)","<p>Is actor a Critter\n"],["isroom","Farts::Lib","Farts/Lib.html#method-i-isroom","(actor)","<p>Is actor a Room\n"],["keys","CacheManager","CacheManager.html#method-i-keys","()","<p>This is provided to traverse the entire object chain. This thrashes the\ncache violently.  See Store#each …\n"],["leave","Exit","Exit.html#method-i-leave","(e)","<p>Event :leave\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["level","Farts::Lib","Farts/Lib.html#method-i-level","(actor)","<p>Get the level of actor\n"],["lineno","Farts::Lexer","Farts/Lexer.html#method-i-lineno","()",""],["load","Command","Command.html#method-c-load","()","<p>load builds a command lookup trie from the commands listed in a yaml config\nfile and in the and then …\n"],["load","Script","Script.html#method-i-load","(str=nil)","<p>Load a program\n<p>return &mdash; success or failure\n\n"],["logger","Module","Module.html#method-i-logger","(loglevel='DEBUG', logto=['stderr','server'])","<p>logger defines a named log and log method for the class\n<p>loglevel &mdash; the level of logging to do\n\n"],["login_menu","Account","Account.html#method-i-login_menu","()",""],["loginit","Log","Log.html#method-i-loginit","(logname, loglevel, logto)","<p>Access a logger class\n<p>logname &mdash; The name of the logger\n<p>loglevel &mdash; the level of logging to do\n"],["makenoswap","CacheManager","CacheManager.html#method-i-makenoswap","(oid)","<p>Mark an object in the cache as nonswappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makenoswap","DbmStore","DbmStore.html#method-i-makenoswap","(oid)","<p>Marks an object nonswappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makenoswap","GdbmStore","GdbmStore.html#method-i-makenoswap","(oid)","<p>Marks an object nonswappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makenoswap","SdbmStore","SdbmStore.html#method-i-makenoswap","(oid)","<p>Marks an object nonswappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makenoswap","Sqlite3Store","Sqlite3Store.html#method-i-makenoswap","(oid)","<p>Marks an object nonswappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makenoswap","SqliteStore","SqliteStore.html#method-i-makenoswap","(oid)","<p>Marks an object nonswappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makenoswap","Store","Store.html#method-i-makenoswap","(oid)","<p>Marks an object nonswappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makeswap","CacheManager","CacheManager.html#method-i-makeswap","(oid)","<p>Mark an object in the cache as swappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makeswap","DbmStore","DbmStore.html#method-i-makeswap","(oid)","<p>Marks an object swappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makeswap","GdbmStore","GdbmStore.html#method-i-makeswap","(oid)","<p>Marks an object swappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makeswap","SdbmStore","SdbmStore.html#method-i-makeswap","(oid)","<p>Marks an object swappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makeswap","Sqlite3Store","Sqlite3Store.html#method-i-makeswap","(oid)","<p>Marks an object swappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makeswap","SqliteStore","SqliteStore.html#method-i-makeswap","(oid)","<p>Marks an object swappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["makeswap","Store","Store.html#method-i-makeswap","(oid)","<p>Marks an object swappable\n<p>oid &mdash; is the object id\n<p>return &mdash; undefined\n"],["mark","CacheManager","CacheManager.html#method-i-mark","(oid)","<p>deliberately mark an object in the cache as dirty see properties.\n"],["mark","DbmStore","DbmStore.html#method-i-mark","(oid)","<p>Marks an object dirty\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; undefined\n"],["mark","GdbmStore","GdbmStore.html#method-i-mark","(oid)","<p>Marks an object dirty\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; undefined\n"],["mark","SdbmStore","SdbmStore.html#method-i-mark","(oid)","<p>Marks an object dirty\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; undefined\n"],["mark","Sqlite3Store","Sqlite3Store.html#method-i-mark","(oid)","<p>Marks an object dirty\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; undefined\n"],["mark","SqliteStore","SqliteStore.html#method-i-mark","(oid)","<p>Marks an object dirty\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; undefined\n"],["mark","Store","Store.html#method-i-mark","(oid)","<p>Marks an object dirty\n<p>oid &mdash; is the id to use in the search.\n<p>return &mdash; undefined\n"],["mark_dead","CacheEntry","CacheEntry.html#method-i-mark_dead","()",""],["memstats","World","World.html#method-i-memstats","()","<p>memstats scans all objects in memory and produces a report\n<p>return &mdash; a string\n\n"],["mode?","TerminalFilter","TerminalFilter.html#method-i-mode-3F","()","<p>Get current parse mode\n<p>return &mdash; The current parse mode\n\n"],["new","Acceptor","Acceptor.html#method-c-new","(server)","<p>Create a new acceptor object\n<p>server &mdash; The reactor this acceptor is associated with.\n<p>returns &mdash; An acceptor object …\n"],["new","Account","Account.html#method-c-new","(conn)","<p>Create an Account connection.  This is a temporary object that handles\nlogin for character and gets them …\n"],["new","CacheEntry","CacheEntry.html#method-c-new","(oid=nil,obj=nil,dirty=false,noswap=false)","<p>perhaps add LRU counters as CacheEntry is pretty dumb\n"],["new","CacheManager","CacheManager.html#method-c-new","(db)",""],["new","CacheStats","CacheStats.html#method-c-new","()",""],["new","Character","Character.html#method-c-new","(name,acctid)","<p>Create a new Character object IMPORTANT :Character objects must be marked\nnonswappable while connected!!! …\n"],["new","Client","Client.html#method-c-new","(opts)",""],["new","Command","Command.html#method-c-new","(cmd, name, help)","<p>Create a command\n"],["new","Configuration","Configuration.html#method-c-new","()",""],["new","Connection","Connection.html#method-c-new","(server, sock)","<p>Create a new connection object\n<p>server &mdash; The reactor this connection is associated with.\n<p>sock &mdash; The socket for …\n"],["new","Connector","Connector.html#method-c-new","(server, address)","<p>Create a new Connector object\n<p>server &mdash; The reactor this Connector is associated with.\n<p>address &mdash; The address …\n"],["new","ConsoleClient","ConsoleClient.html#method-c-new","(opts)",""],["new","CursesClient","CursesClient.html#method-c-new","(opts)",""],["new","DbmStore","DbmStore.html#method-c-new","(dbfile)",""],["new","DebugFilter","DebugFilter.html#method-c-new","(pstack)","<p>Construct filter\n<p>pstack &mdash; The ProtocolStack associated with this filter\n\n"],["new","Dumper","Dumper.html#method-c-new","()",""],["new","Engine","Engine.html#method-c-new","()","<p>Create the an engine.\n<p>return &mdash; A handle to the engine.\n\n"],["new","Event","Event.html#method-c-new","(from,to,kind,msg=nil)","<p>Constructor for an Event.\n<p>from &mdash; The id of the issuer of the event.\n<p>to &mdash; The id of the target of the event. …\n"],["new","EventManager","EventManager.html#method-c-new","()",""],["new","Exit","Exit.html#method-c-new","(name, owner, location, to_room)","<p>Create a new Exit object\n<p>name &mdash; The displayed name of the room\n<p>owner &mdash; The owner id of this room\n"],["new","Farts::AttributeSyntaxNode","Farts/AttributeSyntaxNode.html#method-c-new","( lineno, vname, vattr )",""],["new","Farts::CallSyntaxNode","Farts/CallSyntaxNode.html#method-c-new","( lineno, func, args )",""],["new","Farts::CommandSyntaxNode","Farts/CommandSyntaxNode.html#method-c-new","( lineno, cmd, args )",""],["new","Farts::CommentSyntaxNode","Farts/CommentSyntaxNode.html#method-c-new","( lineno, val )",""],["new","Farts::EndSyntaxNode","Farts/EndSyntaxNode.html#method-c-new","( lineno, val )",""],["new","Farts::IfSyntaxNode","Farts/IfSyntaxNode.html#method-c-new","( lineno, condition, stmts_true, stmts_false )",""],["new","Farts::Interpreter","Farts/Interpreter.html#method-c-new","(vars)","<p>Construct an interpreter machine\n<p>vars &mdash; A hash table of attribute name/value pairs.\n\n\n<pre>Currently we support ...</pre>\n"],["new","Farts::Lexer","Farts/Lexer.html#method-c-new","(str)",""],["new","Farts::LiteralSyntaxNode","Farts/LiteralSyntaxNode.html#method-c-new","( lineno, val )",""],["new","Farts::LocalVarSyntaxNode","Farts/LocalVarSyntaxNode.html#method-c-new","( lineno, vname )",""],["new","Farts::ProgramSyntaxNode","Farts/ProgramSyntaxNode.html#method-c-new","( lineno, tree )",""],["new","Farts::SyntaxNode","Farts/SyntaxNode.html#method-c-new","( lineno )",""],["new","Filter","Filter.html#method-c-new","(pstack)","<p>Construct filter\n<p>pstack &mdash; The ProtocolStack associated with this filter\n\n"],["new","GameObject","GameObject.html#method-c-new","(name, owner, location=nil)","<p>Create a new Object\n<p>name &mdash; Every object needs a name\n<p>owner &mdash; The owner id of this object\n"],["new","GdbmStore","GdbmStore.html#method-c-new","(dbfile)",""],["new","LineIO","LineIO.html#method-c-new","(sock, bufsize=8192)","<p>Creates a new LineIO object\n<p>sock &mdash; The socket which will be used\n<p>bufsize &mdash; The size of the buffer to use (default …\n"],["new","Loader","Loader.html#method-c-new","()",""],["new","Log","Log.html#method-c-new","()","<p>Load logger configuration\n"],["new","PacketIO","PacketIO.html#method-c-new","(sock, bufsize=16380)","<p>Creates a new PackIO object\n<p>sock &mdash; The socket which will be used\n<p>bufsize &mdash; The size of the buffer to use (default …\n"],["new","ProtocolStack","ProtocolStack.html#method-c-new","(conn)","<p>Construct a ProtocolStack\n<p>conn &mdash; The connection associated with this filter\n\n"],["new","Reactor","Reactor.html#method-c-new","(service_port, service_type, service_io, service_negotiation, service_filters, address=nil)","<p>Constructor for Reactor\n<p>service_port &mdash; The port the server will listen on or client will connect to.\n<p>service_type … &mdash; "],["new","Room","Room.html#method-c-new","(name, owner)","<p>Create a new Room object\n<p>name &mdash; The displayed name of the room\n<p>owner &mdash; The owner id of this room\n"],["new","Root","Root.html#method-c-new","(name, owner)","<p>Create a new Root\n<p>name &mdash; Every object needs a name\n<p>owner &mdash; The owner id of this object\n"],["new","Script","Script.html#method-c-new","(name, owner, language)","<p>Create a new Script\n<p>name &mdash; The filename of the script\n<p>owner &mdash; The owner id of this script\n"],["new","SdbmStore","SdbmStore.html#method-c-new","(dbfile)",""],["new","Session","Session.html#method-c-new","(server, sock=nil)","<p>Create a new session object Used when opening both an acceptor or\nconnection.\n<p>server &mdash; The reactor or connector …\n"],["new","SockIO","SockIO.html#method-c-new","(sock, bufsize=8192)","<p>Creates a new SockIO object\n<p>sock &mdash; The socket which will be used\n<p>bufsize &mdash; The size of the buffer to use (default …\n"],["new","Sqlite3Store","Sqlite3Store.html#method-c-new","(dbfile)",""],["new","SqliteStore","SqliteStore.html#method-c-new","(dbfile)",""],["new","Store","Store.html#method-c-new","()","<p>Construct store\n<p>return &mdash; Handle to the store\n\n"],["new","TelnetFilter","TelnetFilter.html#method-c-new","(pstack, server)","<p>Initialize state of filter\n<p>pstack &mdash; The ProtocolStack associated with this filter\n<p>server &mdash; An optional hash …\n"],["new","TerminalFilter","TerminalFilter.html#method-c-new","(pstack)","<p>Construct filter\n<p>pstack &mdash; The ProtocolStack associated with this filter\n\n"],["new","TernaryTrie","TernaryTrie.html#method-c-new","()","<p>constructor simply ensures we have a root\n"],["new","TernaryTrie::TNode","TernaryTrie/TNode.html#method-c-new","(kc)",""],["new","Timer","Timer.html#method-c-new","(id,name,time)","<p>Constructor for a Timer object.\n<p>id &mdash; The id of the object\n<p>name &mdash; The symbol that defines the kind of timer …\n"],["new","World","World.html#method-c-new","()","<p>Create the World.  This loads or creates the database depending on whether\nit finds it.\n<p>return &mdash; A handle …\n\n"],["new","XmlStore","XmlStore.html#method-c-new","(dbfile)",""],["new","YamlStore","YamlStore.html#method-c-new","(dbfile)",""],["next_token","Farts::Lexer","Farts/Lexer.html#method-i-next_token","()",""],["noswap!","CacheEntry","CacheEntry.html#method-i-noswap-21","()",""],["noswap?","CacheEntry","CacheEntry.html#method-i-noswap-3F","()","<p>Noswappable cache entries are objects that have non persistent attributes. \n*heavy sigh* We can never …\n"],["objects","GameObject","GameObject.html#method-i-objects","()","<p>Finds all objects contained in this object\n<p>return &mdash; Handle to a array of the objects.\n\n"],["ocmd_echoat","ObjCmd","ObjCmd.html#method-i-ocmd_echoat","(args)","<p>This command echos input to location\n"],["options","Command","Command.html#method-c-options","()","<p>We need options at class level\n"],["parse","Character","Character.html#method-i-parse","(m)","<p>All command input routed through here and parsed.\n<p>m &mdash; The input message to be parsed\n<p>return &mdash; Undefined.\n"],["parse","GameObject","GameObject.html#method-i-parse","(m)","<p>All command input routed through here and parsed.\n<p>m &mdash; The input message to be parsed\n<p>return &mdash; false or true …\n"],["parse","Root","Root.html#method-i-parse","(m)","<p>All command input routed through here and parsed.\n<p>m &mdash; The input message to be parsed\n<p>return &mdash; false or true …\n"],["parse_menu","Account","Account.html#method-i-parse_menu","(msg)","<p>Handles message while in the login menu - called by parse_messages. This\nwas refactored out of Account#parse_messages …\n"],["parse_messages","Account","Account.html#method-i-parse_messages","(msg)","<p>Handles String messages from Connection - called by update. This was\nrefactored out of Account#update …\n"],["poll","Reactor","Reactor.html#method-i-poll","(tm_out)","<p>poll starts the Reactor running to process incoming connection, input and\noutput requests.  It also executes …\n"],["process_events","EventManager","EventManager.html#method-i-process_events","()","<p>Process events A false return in a PRE trigger will prevent execution of\nthe event\n"],["prompt","Account","Account.html#method-i-prompt","()",""],["proper_name","String","String.html#method-i-proper_name","()","<p>Make string into proper name removes digits, downcases and then capitalizes\nwords. Sorry it doesn’t like …\n"],["property","Module","Module.html#method-i-property","(*sym)","<p>Properties modifies class Module by adding the property method which:\n<p>creates read/write accessors for …\n"],["publish","Publisher","Publisher.html#method-i-publish","(*arg)","<p>If this object’s changed state is <code>true</code>, invoke the update\nmethod in each currently associated subscriber …\n"],["put","CacheManager","CacheManager.html#method-i-put","(obj)","<p>puts an object\n<p>obj &mdash; <p>The integer object id to retrieve\n\n<p>return &mdash; <p>undefined\n"],["put","DbmStore","DbmStore.html#method-i-put","(obj)","<p>Adds a new object to the database.\n<p>obj &mdash; is a reference to object to be added\n<p>return &mdash; Undefined.\n"],["put","GdbmStore","GdbmStore.html#method-i-put","(obj)","<p>Adds a new object to the database.\n<p>obj &mdash; is a reference to object to be added\n<p>return &mdash; Undefined.\n"],["put","SdbmStore","SdbmStore.html#method-i-put","(obj)","<p>Adds a new object to the database.\n<p>obj &mdash; is a reference to object to be added\n<p>return &mdash; Undefined.\n"],["put","Sqlite3Store","Sqlite3Store.html#method-i-put","(obj)","<p>Adds a new object to the database.\n<p>obj &mdash; is a reference to object to be added\n<p>return &mdash; Undefined.\n"],["put","SqliteStore","SqliteStore.html#method-i-put","(obj)","<p>Adds a new object to the database.\n<p>obj &mdash; is a reference to object to be added\n<p>return &mdash; Undefined.\n"],["put","Store","Store.html#method-i-put","(obj)","<p>Adds a new object to the database.\n<p>obj &mdash; is a reference to object to be added\n<p>return &mdash; Undefined.\n"],["put","XmlStore","XmlStore.html#method-i-put","(obj)","<p>Adds a new object to the database.\n<p>obj &mdash; is a reference to object to be added\n<p>return &mdash; Undefined.\n"],["put","YamlStore","YamlStore.html#method-i-put","(obj)","<p>Adds a new object to the database.\n<p>obj &mdash; is a reference to object to be added\n<p>return &mdash; Undefined.\n"],["put_object","Root","Root.html#method-i-put_object","(obj)",""],["query","Connection","Connection.html#method-i-query","(attrib)","<p>attrib &mdash; <p>A Symbol not handled here is assumed to be a query and\n\n\n\n<pre>  its handling is delegated to the ProtocolStack, ...</pre>\n"],["query","ProtocolStack","ProtocolStack.html#method-i-query","(attr)","<p>The filter_query method returns state information for the filter.\n<p>attr &mdash; A symbol representing the attribute …\n"],["rand","Farts::Lib","Farts/Lib.html#method-i-rand","(num)","<p>Is random percentage less than or equal to num\n"],["read","LineIO","LineIO.html#method-i-read","()","<p>read will receive a set of lines from the socket.  A line may be terminated\nby CRLF, CRNUL, LFCR, CR …\n"],["read","PacketIO","PacketIO.html#method-i-read","()","<p>read will receive a data from the socket.\n<p>return &mdash; The data read\n<p>IOError &mdash; A sockets error occurred.\n"],["read","SockIO","SockIO.html#method-i-read","()","<p>read will receive a data from the socket.\n<p>return &mdash; The data read\n<p>IOError &mdash; A sockets error occurred.\n"],["read_flush","SockIO","SockIO.html#method-i-read_flush","()","<p>read_flush will kill the input buffer\n"],["read_urgent","SockIO","SockIO.html#method-i-read_urgent","()","<p>read_urgent will receive urgent data from the socket.\n<p>return &mdash; The data read\n<p>IOError &mdash; A sockets error occurred. …\n"],["register","Reactor","Reactor.html#method-i-register","(session)","<p>register adds a session to the registry\n<p>session &mdash; \n"],["rem_admin","World","World.html#method-i-rem_admin","(oid)","<p>Remove admin priviledges from character\n<p>oid &mdash; character object id\n<p>return &mdash; undefined\n"],["rem_builder","World","World.html#method-i-rem_builder","(oid)","<p>Remove admin priviledges from character\n<p>oid &mdash; character object id\n<p>return &mdash; undefined\n"],["reset","Timer","Timer.html#method-i-reset","()",""],["run","ConsoleClient","ConsoleClient.html#method-i-run","()",""],["run","CursesClient","CursesClient.html#method-i-run","()",""],["run","Dumper","Dumper.html#method-i-run","()","<p>Launches the dumper\n"],["run","Engine","Engine.html#method-i-run","()","<p>main loop to run engine.\n<p>note &mdash; @shutdown never set by anyone yet\n\n"],["run","Loader","Loader.html#method-i-run","()","<p>Launches the loader\n"],["save","DbmStore","DbmStore.html#method-i-save","()","<p>Save the world\n<p>return &mdash; Undefined.\n\n"],["save","GdbmStore","GdbmStore.html#method-i-save","()","<p>Save the world\n<p>return &mdash; Undefined.\n\n"],["save","SdbmStore","SdbmStore.html#method-i-save","()","<p>Save the world\n<p>return &mdash; Undefined.\n\n"],["save","Sqlite3Store","Sqlite3Store.html#method-i-save","()","<p>Save the world\n<p>return &mdash; Undefined.\n\n"],["save","SqliteStore","SqliteStore.html#method-i-save","()","<p>Save the world\n<p>return &mdash; Undefined.\n\n"],["save","Store","Store.html#method-i-save","()","<p>Save or flush the store to disk\n<p>return &mdash; Undefined.\n\n"],["save","XmlStore","XmlStore.html#method-i-save","()","<p>Save the world\n<p>return &mdash; Undefined.\n\n"],["save","YamlStore","YamlStore.html#method-i-save","()","<p>Save the world\n<p>return &mdash; Undefined.\n\n"],["send_naws","TelnetFilter","TelnetFilter.html#method-i-send_naws","()",""],["sendmsg","Account","Account.html#method-i-sendmsg","(msg)",""],["sendmsg","Connection","Connection.html#method-i-sendmsg","(msg)","<p>sendmsg places a message on the Connection’s output buffer.\n<p>msg &mdash; The message, a reference to a buffer\n\n"],["sendto","Character","Character.html#method-i-sendto","(s)","<p>Sends a message to the character if they are connected.\n<p>s &mdash; The message string\n<p>return &mdash; Undefined.\n"],["set","Connection","Connection.html#method-i-set","(attrib, val)","<p>+attrib,val+ &mdash; <p>An Array not handled here is assumed to be a set command and\n\n\n\n<pre>  its handling is delegated ...</pre>\n"],["set","ProtocolStack","ProtocolStack.html#method-i-set","(attr, value)","<p>The filter_set method sets state information on the filter.\n<p>pair &mdash; An attr/value pair [:symbol, value]\n<p>return … &mdash; "],["set_initdone","Connection","Connection.html#method-i-set_initdone","()","<p>This is called from TelnetFilter when we are done with negotiations. The\nevent :initdone wakens observer …\n"],["set_mode","TerminalFilter","TerminalFilter.html#method-i-set_mode","(m)","<p>set current parse mode\n<p>m &mdash; Mode to set it to\n\n"],["set_timer","World","World.html#method-i-set_timer","(id, name, time)","<p>Set/add a timer for an object\n<p>id &mdash; The id of the object that wants to get a timer event\n<p>name &mdash; The symbolic …\n"],["sex","Farts::Lib","Farts/Lib.html#method-i-sex","(actor)","<p>Get the sex of actor\n"],["show","Character","Character.html#method-i-show","(e)","<p>Event :show\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["shutdown","World","World.html#method-i-shutdown","()",""],["start","Reactor","Reactor.html#method-i-start","(engine)","<p>Start initializes the reactor and gets it ready to accept incoming\nconnections.\n<p>engine &mdash; The client engine …\n"],["startup","World","World.html#method-i-startup","()",""],["stats","CacheManager","CacheManager.html#method-i-stats","()","<p>produce a report - see cmd_stats\n"],["stats","DbmStore","DbmStore.html#method-i-stats","()","<p>produces a statistical report of the database\n<p>return &mdash; a string containing the report\n\n"],["stats","GdbmStore","GdbmStore.html#method-i-stats","()","<p>produces a statistical report of the database\n<p>return &mdash; a string containing the report\n\n"],["stats","SdbmStore","SdbmStore.html#method-i-stats","()","<p>produces a statistical report of the database\n<p>return &mdash; a string containing the report\n\n"],["stats","Sqlite3Store","Sqlite3Store.html#method-i-stats","()","<p>produces a statistical report of the database\n<p>return &mdash; a string containing the report\n\n"],["stats","SqliteStore","SqliteStore.html#method-i-stats","()","<p>produces a statistical report of the database\n<p>return &mdash; a string containing the report\n\n"],["stats","Store","Store.html#method-i-stats","()","<p>produces a statistical report of the database\n<p>return &mdash; a string containing the report\n\n"],["status_rept","Account","Account.html#method-i-status_rept","()",""],["stop","Reactor","Reactor.html#method-i-stop","()","<p>stop requests each of the connections to disconnect in the server’s user\nlist, deletes the connections, …\n"],["store","Dumper","Dumper.html#method-i-store","(v)",""],["subscribe","Publisher","Publisher.html#method-i-subscribe","(subscriber)","<p>Add <code>subscriber</code> as an subscriber on this object.\n<code>subscriber</code> will now receive notifications.\n"],["subscriber_count","Publisher","Publisher.html#method-i-subscriber_count","()","<p>Count of subscribers to this object.\n"],["swap!","CacheEntry","CacheEntry.html#method-i-swap-21","()",""],["sync","CacheManager","CacheManager.html#method-i-sync","()","<p>syncronize the entire cache with the database called by save.\n"],["sync_chain","CacheManager","CacheManager.html#method-i-sync_chain","(i)","<p>syncronize a specific list chain not yet called but included for possible\nperformance enhancement\n"],["timer","GameObject","GameObject.html#method-i-timer","(e)","<p>Event :timer\n<p>e &mdash; The event\n<p>return &mdash; Undefined\n"],["to_hash","TernaryTrie","TernaryTrie.html#method-i-to_hash","()","<p>Routine which converts the trie into a hash table\n<p>return &mdash; hash table of key/value pairs\n\n"],["toggle_color","Account","Account.html#method-i-toggle_color","()",""],["tokenpos","Farts::Lexer","Farts/Lexer.html#method-i-tokenpos","()",""],["unregister","Reactor","Reactor.html#method-i-unregister","(session)","<p>unregister removes a session from the registry\n<p>session &mdash; \n"],["unset_timer","World","World.html#method-i-unset_timer","(id, name=nil)","<p>Unset/remove a timer for an object\n<p>id &mdash; The id of the object to remove a timer event\n<p>name &mdash; The symbolic name …\n"],["unsubscribe","Publisher","Publisher.html#method-i-unsubscribe","(subscriber)","<p>Delete <code>subscriber</code> as a subscriber on this object. It will no\nlonger receive notifications.\n"],["unsubscribe_all","Publisher","Publisher.html#method-i-unsubscribe_all","()","<p>Delete all subscribers associated with this object.\n"],["update","Account","Account.html#method-i-update","(msg)","<p>Receives messages from a Connection being observed and handles login state.\n<p>msg &mdash; The message string\n\n<p>This …\n"],["update","Client","Client.html#method-i-update","(msg)",""],["update","Connection","Connection.html#method-i-update","(msg)","<p>Update will be called when the object the connection is observing wants to\nnotify us of a change in state …\n"],["update","ConsoleClient","ConsoleClient.html#method-i-update","(msg)",""],["update","CursesClient","CursesClient.html#method-i-update","(msg)",""],["update","Engine","Engine.html#method-i-update","(newconn)","<p>Update is called by an acceptor passing us a new session.  We create an\nincoming object and set it and …\n"],["vtsupport?","Account","Account.html#method-i-vtsupport-3F","()",""],["word_wrap","Cmd","Cmd.html#method-i-word_wrap","(s, len)",""],["world","Root","Root.html#method-i-world","()",""],["write","PacketIO","PacketIO.html#method-i-write","(msg)","<p>write will transmit a packet to the socket, we calculated the size here\n<p>msg &mdash; The message string to be sent. …\n"],["write","SockIO","SockIO.html#method-i-write","(msg)","<p>write will transmit a message to the socket\n<p>msg &mdash; The message string to be sent.\n<p>return &mdash; false if more data …\n"],["write_flush","SockIO","SockIO.html#method-i-write_flush","()","<p>write_flush will kill the output buffer\n"],["write_urgent","SockIO","SockIO.html#method-i-write_urgent","(msg)","<p>write_urgent will write urgent data to the socket.\n<p>msg &mdash; The message string to be sent.\n<p>IOError &mdash; A sockets …\n"],["README","","README.html","","<p>TeensyMUD Server\n<p>v3.0.0\n<p>Introduction\n"],["TML","","TML.html","","<p>Teensy Markup Language\n<p>Introduction\n<p>Teensy Markup Language is a general mechanism used to markup mud text. …\n"]]}}